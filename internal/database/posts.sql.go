// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (id, created_at, updated_at, feed_id, title, url,
description, published_at) 
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
`

type CreatePostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	FeedID      uuid.UUID
	Title       string
	Url         string
	Description sql.NullString
	PublishedAt time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FeedID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
	)
	return err
}

const getPostUser = `-- name: GetPostUser :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.feed_id, posts.title, posts.url, posts.description, posts.published_at, feeds.name
FROM posts
INNER JOIN feed_follows on posts.feed_id = feed_follows.feed_id
INNER JOIN feeds ON posts.feed_id = feeds.id
WHERE feeds.user_id = $1
ORDER BY posts.created_at DESC
LIMIT $2
`

type GetPostUserParams struct {
	UserID uuid.UUID
	Limit  int32
}

type GetPostUserRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	FeedID      uuid.UUID
	Title       string
	Url         string
	Description sql.NullString
	PublishedAt time.Time
	Name        string
}

func (q *Queries) GetPostUser(ctx context.Context, arg GetPostUserParams) ([]GetPostUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostUserRow
	for rows.Next() {
		var i GetPostUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
